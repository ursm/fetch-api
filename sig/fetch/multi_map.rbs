module Fetch
  class MultiMap[KIN, KOUT < Comparable, VIN, VOUT]
    include Enumerable[[KOUT, VOUT]]

    @entries: Array[[KOUT, VOUT]]

    def initialize: () -> void
    def append: (KIN, VIN) -> void
    def delete: (KIN) -> void
    def get: (KIN) -> VOUT?
    def get_all: (KIN) -> Array[VOUT]
    def has: (KIN) -> bool
    def keys: -> Array[KOUT]
    def set: (KIN, VIN) -> void
    def values: () -> Array[VOUT]

    def each: () { ([KOUT, VOUT]) -> void } -> Array[[KOUT, VOUT]]
            | () -> Enumerator[[KOUT, VOUT], Array[[KOUT, VOUT]]]

    private

    def to_key: (KIN) -> KOUT
    def to_value: (VIN) -> VOUT
  end
end
